export var NgFlowchart;
(function (NgFlowchart) {
    class Flow {
        constructor(canvas) {
            this.canvas = canvas;
        }
        /**
         * Returns the json representation of this flow
         * @param indent Optional indent to specify for formatting
         */
        toJSON(indent) {
            return JSON.stringify(this.toObject(), null, indent);
        }
        toObject() {
            return {
                root: this.canvas.flow.rootStep?.toJSON()
            };
        }
        /**
         * Create a flow and render it on the canvas from a json string
         * @param json The json string of the flow to render
         */
        async upload(json) {
            let jsonObj = typeof json === 'string' ? JSON.parse(json) : json;
            let root = jsonObj.root;
            this.clear();
            await this.canvas.upload(root);
        }
        /**
         * Returns the root step of the flow chart
         */
        getRoot() {
            return this.canvas.flow.rootStep;
        }
        /**
         * Finds a step in the flow chart by a given id
         * @param id Id of the step to find. By default, the html id of the step
         */
        getStep(id) {
            return this.canvas.flow.steps.find(child => child.id == id);
        }
        /**
         * Re-renders the canvas. Generally this should only be used in rare circumstances
         * @param pretty Attempt to recenter the flow in the canvas
         */
        render(pretty) {
            this.canvas.reRender(pretty);
        }
        /**
         * Clears all flow chart, reseting the current canvas
         */
        clear() {
            if (this.canvas.flow?.rootStep) {
                this.canvas.flow.rootStep.destroy(true, false);
                this.canvas.reRender();
            }
        }
    }
    NgFlowchart.Flow = Flow;
    class Options {
        constructor() {
            /** The gap (in pixels) between flow steps*/
            this.stepGap = 40;
            /** An inner deadzone radius (in pixels) that will not register the hover icon  */
            this.hoverDeadzoneRadius = 20;
            /** Is the flow sequential? If true, then you will not be able to drag parallel steps */
            this.isSequential = false;
            /** The default root position when dropped. Default is TOP_CENTER */
            this.rootPosition = 'TOP_CENTER';
            /** Should the canvas be centered when a resize is detected? */
            this.centerOnResize = true;
            /** Canvas zoom options. Defaults to mouse wheel zoom */
            this.zoom = {
                mode: 'WHEEL',
                defaultStep: .1
            };
        }
    }
    NgFlowchart.Options = Options;
})(NgFlowchart || (NgFlowchart = {}));
//# sourceMappingURL=data:application/json;base64,