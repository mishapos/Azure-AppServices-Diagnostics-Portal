{"version":3,"file":"ng-flowchart-canvas.service.d.ts","sources":["ng-flowchart-canvas.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef, ViewContainerRef } from '@angular/core';\r\nimport { NgFlowchart } from './model/flow.model';\r\nimport { NgFlowchartStepComponent } from './ng-flowchart-step/ng-flowchart-step.component';\r\nimport { CanvasRendererService } from './services/canvas-renderer.service';\r\nimport { DropDataService as DragService } from './services/dropdata.service';\r\nimport { OptionsService } from './services/options.service';\r\nimport { StepManagerService } from './services/step-manager.service';\r\nexport declare class CanvasFlow {\r\n    rootStep: NgFlowchartStepComponent;\r\n    private _steps;\r\n    hasRoot(): boolean;\r\n    addStep(step: NgFlowchartStepComponent): void;\r\n    removeStep(step: NgFlowchartStepComponent): void;\r\n    get steps(): ReadonlyArray<NgFlowchartStepComponent>;\r\n    constructor();\r\n}\r\nexport declare class NgFlowchartCanvasService {\r\n    private drag;\r\n    options: OptionsService;\r\n    private renderer;\r\n    private stepmanager;\r\n    viewContainer: ViewContainerRef;\r\n    isDragging: boolean;\r\n    currentDropTarget: NgFlowchart.DropTarget;\r\n    flow: CanvasFlow;\r\n    _disabled: boolean;\r\n    get disabled(): boolean;\r\n    noParentError: {\r\n        code: string;\r\n        message: string;\r\n    };\r\n    constructor(drag: DragService, options: OptionsService, renderer: CanvasRendererService, stepmanager: StepManagerService);\r\n    init(view: ViewContainerRef): void;\r\n    moveStep(drag: DragEvent, id: any): void;\r\n    onDrop(drag: DragEvent): Promise<void>;\r\n    onDragStart(drag: DragEvent): void;\r\n    createStepFromType(id: string, type: string, data: any): Promise<ComponentRef<NgFlowchartStepComponent>>;\r\n    createStep(pending: NgFlowchart.PendingStep): Promise<ComponentRef<NgFlowchartStepComponent>>;\r\n    resetScale(): void;\r\n    scaleUp(step?: number): void;\r\n    scaleDown(step?: number): void;\r\n    setScale(scaleValue: number): void;\r\n    addChildStep(componentRef: ComponentRef<NgFlowchartStepComponent>, dropTarget: NgFlowchart.DropTarget): void;\r\n    addToCanvas(componentRef: ComponentRef<NgFlowchartStepComponent>): void;\r\n    reRender(pretty?: boolean): void;\r\n    upload(root: any): Promise<void>;\r\n    private uploadNode;\r\n    private setRoot;\r\n    private addStepToFlow;\r\n    private placeStepBelow;\r\n    private placeStepAdjacent;\r\n    private placeStepAbove;\r\n    private dropError;\r\n    private moveError;\r\n}\r\n"]}