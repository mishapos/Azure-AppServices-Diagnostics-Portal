{"version":3,"file":"ng-flowchart-step.component.d.ts","sources":["ng-flowchart-step.component.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentRef, ElementRef, EventEmitter, TemplateRef } from '@angular/core';\r\nimport { NgFlowchart } from '../model/flow.model';\r\nimport { NgFlowchartCanvasService } from '../ng-flowchart-canvas.service';\r\nexport declare type AddChildOptions = {\r\n    /** Should the child be added as a sibling to existing children, if false the existing children will be reparented to this new child.\r\n     * Default is true.\r\n     * */\r\n    sibling?: boolean;\r\n    /** The index of the child. Only used when sibling is true.\r\n     * Defaults to the end of the child array.\r\n     */\r\n    index?: number;\r\n};\r\nexport declare class NgFlowchartStepComponent<T = any> {\r\n    onMoveStart(event: DragEvent): void;\r\n    onMoveEnd(event: DragEvent): void;\r\n    protected view: ElementRef;\r\n    data: T;\r\n    type: string;\r\n    canvas: NgFlowchartCanvasService;\r\n    compRef: ComponentRef<NgFlowchartStepComponent>;\r\n    viewInit: EventEmitter<any>;\r\n    contentTemplate: TemplateRef<any>;\r\n    private _id;\r\n    private _currentPosition;\r\n    private _initPosition;\r\n    private _isHidden;\r\n    private _parent;\r\n    private _children;\r\n    private arrow;\r\n    private drop;\r\n    private viewContainer;\r\n    private compFactory;\r\n    constructor();\r\n    init(drop: any, viewContainer: any, compFactory: any): void;\r\n    canDeleteStep(): boolean;\r\n    canDrop(dropEvent: NgFlowchart.DropTarget, error: NgFlowchart.ErrorMessage): boolean;\r\n    shouldEvalDropHover(coords: number[], stepToDrop: NgFlowchart.Step): boolean;\r\n    onUpload(data: T): Promise<void>;\r\n    getDropPositionsForStep(step: NgFlowchart.Step): NgFlowchart.DropPosition[];\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    get id(): any;\r\n    get currentPosition(): number[];\r\n    /**\r\n     * Creates and adds a child to this step\r\n     * @param template The template or component type to create\r\n     * @param options Add options\r\n     */\r\n    addChild(pending: NgFlowchart.PendingStep, options: AddChildOptions): Promise<NgFlowchartStepComponent | null>;\r\n    /**\r\n     * Destroys this step component and updates all necessary child and parent relationships\r\n     * @param recursive\r\n     * @param checkCallbacks\r\n     */\r\n    destroy(recursive?: boolean, checkCallbacks?: boolean): boolean;\r\n    /**\r\n     * Remove a child from this step. Returns the index at which the child was found or -1 if not found.\r\n     * @param childToRemove Step component to remove\r\n     */\r\n    removeChild(childToRemove: NgFlowchartStepComponent): number;\r\n    /**\r\n     * Re-parent this step\r\n     * @param newParent The new parent for this step\r\n     * @param force Force the re-parent if a parent already exists\r\n     */\r\n    setParent(newParent: NgFlowchartStepComponent, force?: boolean): void;\r\n    /**\r\n     * Called when no longer trying to drop or move a step adjacent to this one\r\n     * @param position Position to render the icon\r\n     */\r\n    clearHoverIcons(): void;\r\n    /**\r\n     * Called when a step is trying to be dropped or moved adjacent to this step.\r\n     * @param position Position to render the icon\r\n     */\r\n    showHoverIcon(position: NgFlowchart.DropPosition): void;\r\n    /**\r\n     * Is this the root element of the tree\r\n     */\r\n    isRootElement(): boolean;\r\n    /**\r\n     * Does this step have any children?\r\n     * @param count Optional count of children to check. Defaults to 1. I.E has at least 1 child.\r\n     */\r\n    hasChildren(count?: number): boolean;\r\n    /** Array of children steps for this step */\r\n    get children(): NgFlowchartStepComponent<any>[];\r\n    /** The parent step of this step */\r\n    get parent(): NgFlowchartStepComponent<any>;\r\n    /**\r\n     * Returns the total width extent (in pixels) of this node tree\r\n     * @param stepGap The current step gap for the flow canvas\r\n     */\r\n    getNodeTreeWidth(stepGap: number): any;\r\n    /**\r\n     * Is this step currently hidden and unavailable as a drop location\r\n     */\r\n    isHidden(): boolean;\r\n    /**\r\n     * Return current rect of this step. The position can be animated so getBoundingClientRect cannot\r\n     * be reliable for positions\r\n     * @param canvasRect Optional canvasRect to provide to offset the values\r\n     */\r\n    getCurrentRect(canvasRect?: DOMRect): Partial<DOMRect>;\r\n    /**\r\n     * Returns the JSON representation of this flow step\r\n     */\r\n    toJSON(): any;\r\n    /** The native HTMLElement of this step */\r\n    get nativeElement(): HTMLElement;\r\n    setId(id: any): void;\r\n    zsetPosition(pos: number[], offsetCenter?: boolean): void;\r\n    zaddChild0(newChild: NgFlowchartStepComponent): boolean;\r\n    zaddChildSibling0(child: NgFlowchartStepComponent, index?: number): void;\r\n    zdrawArrow(start: number[], end: number[]): void;\r\n    private destroy0;\r\n    private createArrow;\r\n    private hideTree;\r\n    private showTree;\r\n    private findLastSingleChild;\r\n    private setChildren;\r\n}\r\n"]}