import { ComponentFactoryResolver, Injectable, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { NgFlowchartStepRegistry } from '../ng-flowchart-step-registry.service';
import { NgFlowchartStepComponent } from '../ng-flowchart-step/ng-flowchart-step.component';
import { DropDataService } from './dropdata.service';
/**
 * This service handles adding new steps to the canvas
 */
export class StepManagerService {
    constructor(componentFactoryResolver, registry) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.registry = registry;
    }
    init(viewContainer) {
        this.viewContainer = viewContainer;
    }
    createFromRegistry(id, type, data, canvas) {
        let templateComp = this.registry.getStepImpl(type);
        let compRef;
        if (templateComp instanceof TemplateRef || templateComp instanceof Type) {
            compRef = this.create({
                template: templateComp,
                type: type,
                data: data
            }, canvas);
        }
        else {
            throw 'Invalid registry implementation found for type ' + type;
        }
        compRef.instance.setId(id);
        return compRef;
    }
    create(pendingStep, canvas) {
        let componentRef;
        if (pendingStep.template instanceof TemplateRef) {
            const factory = this.componentFactoryResolver.resolveComponentFactory(NgFlowchartStepComponent);
            componentRef = this.viewContainer.createComponent(factory);
            componentRef.instance.contentTemplate = pendingStep.template;
        }
        else {
            const factory = this.componentFactoryResolver.resolveComponentFactory(pendingStep.template);
            componentRef = this.viewContainer.createComponent(factory);
        }
        componentRef.instance.data = JSON.parse(JSON.stringify(pendingStep.data));
        componentRef.instance.type = pendingStep.type;
        componentRef.instance.canvas = canvas;
        componentRef.instance.compRef = componentRef;
        componentRef.instance.init(componentRef.injector.get(DropDataService), componentRef.injector.get(ViewContainerRef), componentRef.injector.get(ComponentFactoryResolver));
        return componentRef;
    }
}
StepManagerService.decorators = [
    { type: Injectable }
];
StepManagerService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: NgFlowchartStepRegistry }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1tYW5hZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL3N0ZXAtbWFuYWdlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBZ0IsVUFBVSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHeEgsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDaEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDNUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJEOztHQUVHO0FBRUgsTUFBTSxPQUFPLGtCQUFrQjtJQUk3QixZQUFvQix3QkFBa0QsRUFBVSxRQUFpQztRQUE3Riw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7SUFFakgsQ0FBQztJQUVNLElBQUksQ0FBQyxhQUErQjtRQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRU0sa0JBQWtCLENBQUMsRUFBVSxFQUFFLElBQVksRUFBRSxJQUFTLEVBQUUsTUFBZ0M7UUFDN0YsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkQsSUFBSSxPQUErQyxDQUFDO1FBQ3BELElBQUksWUFBWSxZQUFZLFdBQVcsSUFBSSxZQUFZLFlBQVksSUFBSSxFQUFFO1lBQ3ZFLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUNwQixRQUFRLEVBQUUsWUFBWTtnQkFDdEIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsSUFBSSxFQUFFLElBQUk7YUFDWCxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ1o7YUFDSTtZQUNILE1BQU0saURBQWlELEdBQUcsSUFBSSxDQUFDO1NBQ2hFO1FBRUQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0IsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFvQyxFQUFFLE1BQWdDO1FBQ2xGLElBQUksWUFBb0QsQ0FBQztRQUV6RCxJQUFJLFdBQVcsQ0FBQyxRQUFRLFlBQVksV0FBVyxFQUFFO1lBQy9DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQ2hHLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBMkIsT0FBTyxDQUFDLENBQUM7WUFDckYsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQztTQUU5RDthQUNJO1lBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1RixZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQU0sT0FBTyxDQUFDLENBQUM7U0FDakU7UUFFRCxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDMUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztRQUM5QyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDdEMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDO1FBQzdDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUN4QixZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFDMUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFDM0MsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FDcEQsQ0FBQTtRQUdELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7OztZQXpERixVQUFVOzs7WUFWRix3QkFBd0I7WUFHeEIsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIEluamVjdGFibGUsIFRlbXBsYXRlUmVmLCBUeXBlLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nRmxvd2NoYXJ0IH0gZnJvbSAnLi4vbW9kZWwvZmxvdy5tb2RlbCc7XHJcbmltcG9ydCB7IE5nRmxvd2NoYXJ0Q2FudmFzU2VydmljZSB9IGZyb20gJy4uL25nLWZsb3djaGFydC1jYW52YXMuc2VydmljZSc7XHJcbmltcG9ydCB7IE5nRmxvd2NoYXJ0U3RlcFJlZ2lzdHJ5IH0gZnJvbSAnLi4vbmctZmxvd2NoYXJ0LXN0ZXAtcmVnaXN0cnkuc2VydmljZSc7XHJcbmltcG9ydCB7IE5nRmxvd2NoYXJ0U3RlcENvbXBvbmVudCB9IGZyb20gJy4uL25nLWZsb3djaGFydC1zdGVwL25nLWZsb3djaGFydC1zdGVwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERyb3BEYXRhU2VydmljZSB9IGZyb20gJy4vZHJvcGRhdGEuc2VydmljZSc7XHJcblxyXG4vKipcclxuICogVGhpcyBzZXJ2aWNlIGhhbmRsZXMgYWRkaW5nIG5ldyBzdGVwcyB0byB0aGUgY2FudmFzXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTdGVwTWFuYWdlclNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgcmVnaXN0cnk6IE5nRmxvd2NoYXJ0U3RlcFJlZ2lzdHJ5KSB7XHJcblxyXG4gIH1cclxuXHJcbiAgcHVibGljIGluaXQodmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZikge1xyXG4gICAgdGhpcy52aWV3Q29udGFpbmVyID0gdmlld0NvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVGcm9tUmVnaXN0cnkoaWQ6IHN0cmluZywgdHlwZTogc3RyaW5nLCBkYXRhOiBhbnksIGNhbnZhczogTmdGbG93Y2hhcnRDYW52YXNTZXJ2aWNlKTogQ29tcG9uZW50UmVmPE5nRmxvd2NoYXJ0U3RlcENvbXBvbmVudD4ge1xyXG4gICAgbGV0IHRlbXBsYXRlQ29tcCA9IHRoaXMucmVnaXN0cnkuZ2V0U3RlcEltcGwodHlwZSk7XHJcbiAgICBsZXQgY29tcFJlZjogQ29tcG9uZW50UmVmPE5nRmxvd2NoYXJ0U3RlcENvbXBvbmVudD47XHJcbiAgICBpZiAodGVtcGxhdGVDb21wIGluc3RhbmNlb2YgVGVtcGxhdGVSZWYgfHwgdGVtcGxhdGVDb21wIGluc3RhbmNlb2YgVHlwZSkge1xyXG4gICAgICBjb21wUmVmID0gdGhpcy5jcmVhdGUoe1xyXG4gICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZUNvbXAsXHJcbiAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICAgIH0sIGNhbnZhcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhyb3cgJ0ludmFsaWQgcmVnaXN0cnkgaW1wbGVtZW50YXRpb24gZm91bmQgZm9yIHR5cGUgJyArIHR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5zZXRJZChpZCk7XHJcbiAgICByZXR1cm4gY29tcFJlZjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGUocGVuZGluZ1N0ZXA6IE5nRmxvd2NoYXJ0LlBlbmRpbmdTdGVwLCBjYW52YXM6IE5nRmxvd2NoYXJ0Q2FudmFzU2VydmljZSk6IENvbXBvbmVudFJlZjxOZ0Zsb3djaGFydFN0ZXBDb21wb25lbnQ+IHtcclxuICAgIGxldCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxOZ0Zsb3djaGFydFN0ZXBDb21wb25lbnQ+O1xyXG5cclxuICAgIGlmIChwZW5kaW5nU3RlcC50ZW1wbGF0ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XHJcbiAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShOZ0Zsb3djaGFydFN0ZXBDb21wb25lbnQpO1xyXG4gICAgICBjb21wb25lbnRSZWYgPSB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlQ29tcG9uZW50PE5nRmxvd2NoYXJ0U3RlcENvbXBvbmVudD4oZmFjdG9yeSk7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb250ZW50VGVtcGxhdGUgPSBwZW5kaW5nU3RlcC50ZW1wbGF0ZTtcclxuICAgICAgXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHBlbmRpbmdTdGVwLnRlbXBsYXRlKTtcclxuICAgICAgY29tcG9uZW50UmVmID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudDxhbnk+KGZhY3RvcnkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb21wb25lbnRSZWYuaW5zdGFuY2UuZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGVuZGluZ1N0ZXAuZGF0YSkpO1xyXG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLnR5cGUgPSBwZW5kaW5nU3RlcC50eXBlO1xyXG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmNhbnZhcyA9IGNhbnZhcztcclxuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb21wUmVmID0gY29tcG9uZW50UmVmO1xyXG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmluaXQoXHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbmplY3Rvci5nZXQoRHJvcERhdGFTZXJ2aWNlKSxcclxuICAgICAgY29tcG9uZW50UmVmLmluamVjdG9yLmdldChWaWV3Q29udGFpbmVyUmVmKSxcclxuICAgICAgY29tcG9uZW50UmVmLmluamVjdG9yLmdldChDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpXHJcbiAgICApXHJcbiAgICBcclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50UmVmO1xyXG4gIH1cclxufVxyXG4iXX0=