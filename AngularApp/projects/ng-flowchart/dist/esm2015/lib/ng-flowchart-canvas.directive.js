import { Directive, ElementRef, HostBinding, HostListener, Input, ViewContainerRef } from '@angular/core';
import { NgFlowchart } from './model/flow.model';
import { CONSTANTS } from './model/flowchart.constants';
import { NgFlowchartCanvasService } from './ng-flowchart-canvas.service';
import { CanvasRendererService } from './services/canvas-renderer.service';
import { OptionsService } from './services/options.service';
import { StepManagerService } from './services/step-manager.service';
export class NgFlowchartCanvasDirective {
    constructor(canvasEle, viewContainer, canvas, optionService) {
        this.canvasEle = canvasEle;
        this.viewContainer = viewContainer;
        this.canvas = canvas;
        this.optionService = optionService;
        this._disabled = false;
        this._id = null;
        this.canvasEle.nativeElement.classList.add(CONSTANTS.CANVAS_CLASS);
        this.canvasContent = this.createCanvasContent(this.viewContainer);
        this._id = this.canvasContent.id;
    }
    onDrop(event) {
        var _a;
        if (this._disabled) {
            return;
        }
        // its possible multiple canvases exist so make sure we only move/drop on the closest one
        const closestCanvasId = (_a = event.target.closest('.ngflowchart-canvas-content')) === null || _a === void 0 ? void 0 : _a.id;
        if (this._id !== closestCanvasId) {
            return;
        }
        const type = event.dataTransfer.getData('type');
        if ('FROM_CANVAS' == type) {
            this.canvas.moveStep(event, event.dataTransfer.getData('id'));
        }
        else {
            this.canvas.onDrop(event);
        }
    }
    onDragOver(event) {
        event.preventDefault();
        if (this._disabled) {
            return;
        }
        this.canvas.onDragStart(event);
    }
    onResize(event) {
        if (this._options.centerOnResize) {
            this.canvas.reRender(true);
        }
    }
    onZoom(event) {
        if (this._options.zoom.mode === 'WHEEL') {
            this.adjustWheelScale(event);
        }
    }
    set callbacks(callbacks) {
        this.optionService.setCallbacks(callbacks);
    }
    set options(options) {
        this.optionService.setOptions(options);
        this._options = this.optionService.options;
        this.canvas.reRender();
    }
    get options() {
        return this._options;
    }
    set disabled(val) {
        this._disabled = val !== false;
        if (this.canvas) {
            this.canvas._disabled = this._disabled;
        }
    }
    get disabled() {
        return this._disabled;
    }
    ngOnInit() {
        this.canvas.init(this.viewContainer);
        if (!this._options) {
            this.options = new NgFlowchart.Options();
        }
        this.canvas._disabled = this._disabled;
    }
    ngAfterViewInit() {
    }
    ngOnDestroy() {
        for (let i = 0; i < this.viewContainer.length; i++) {
            this.viewContainer.remove(i);
        }
        this.canvasEle.nativeElement.remove();
        this.viewContainer.element.nativeElement.remove();
        this.viewContainer = undefined;
    }
    createCanvasContent(viewContainer) {
        const canvasId = 'c' + Date.now();
        let canvasEle = viewContainer.element.nativeElement;
        let canvasContent = document.createElement('div');
        canvasContent.id = canvasId;
        canvasContent.classList.add(CONSTANTS.CANVAS_CONTENT_CLASS);
        canvasEle.appendChild(canvasContent);
        return canvasContent;
    }
    /**
     * Returns the Flow object representing this flow chart.
     */
    getFlow() {
        return new NgFlowchart.Flow(this.canvas);
    }
    scaleDown() {
        this.canvas.scaleDown();
    }
    scaleUp() {
        this.canvas.scaleUp();
    }
    setScale(scaleValue) {
        const scaleVal = Math.max(0, scaleValue);
        this.canvas.setScale(scaleVal);
    }
    adjustWheelScale(event) {
        if (this.canvas.flow.hasRoot()) {
            event.preventDefault();
            // scale down / zoom out
            if (event.deltaY > 0) {
                this.scaleDown();
            }
            // scale up / zoom in
            else if (event.deltaY < 0) {
                this.scaleUp();
            }
        }
    }
    ;
}
NgFlowchartCanvasDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngFlowchartCanvas]',
                providers: [
                    NgFlowchartCanvasService,
                    StepManagerService,
                    OptionsService,
                    CanvasRendererService
                ]
            },] }
];
NgFlowchartCanvasDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: NgFlowchartCanvasService },
    { type: OptionsService }
];
NgFlowchartCanvasDirective.propDecorators = {
    onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],
    onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }],
    onZoom: [{ type: HostListener, args: ['wheel', ['$event'],] }],
    callbacks: [{ type: Input, args: ['ngFlowchartCallbacks',] }],
    options: [{ type: Input, args: ['ngFlowchartOptions',] }],
    disabled: [{ type: Input, args: ['disabled',] }, { type: HostBinding, args: ['attr.disabled',] }]
};
//# sourceMappingURL=data:application/json;base64,